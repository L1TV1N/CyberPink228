import pandas as pd
from pathlib import Path
from .utils import parse_time_window

def load_input(path):
    path = Path(path)
    if path.suffix in ['.csv', '.xls']:
        df = pd.read_csv(path)
    else:
        df = pd.read_csv(path)

    # üß≠ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
    rename_map = {
        '–ù–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞': 'id',
        '–ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞': 'address',
        '–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è —à–∏—Ä–æ—Ç–∞': 'latitude',
        '–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –¥–æ–ª–≥–æ—Ç–∞': 'longitude',
        '–£—Ä–æ–≤–µ–Ω—å –∫–ª–∏–µ–Ω—Ç–∞': 'priority',
        '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è': 'time_window_start',
        '–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è': 'time_window_end',
        '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–±–µ–¥–∞': 'lunch_start',
        '–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–±–µ–¥–∞': 'lunch_end',
    }

    for k, v in rename_map.items():
        if k in df.columns and v not in df.columns:
            df.rename(columns={k: v}, inplace=True)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    required = ['latitude', 'longitude']
    for col in required:
        if col not in df.columns:
            raise ValueError(f"–í —Ñ–∞–π–ª–µ –Ω–µ—Ç –Ω—É–∂–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞: {col}")

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    df['latitude'] = pd.to_numeric(df['latitude'], errors='coerce')
    df['longitude'] = pd.to_numeric(df['longitude'], errors='coerce')

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫–æ–Ω (–µ—Å–ª–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã –≤ –æ–¥–Ω—É —è—á–µ–π–∫—É)
    if 'time_window_start' in df.columns and df['time_window_start'].dtype == object:
        if 'time_window_end' not in df.columns or df['time_window_end'].isnull().all():
            df[['time_window_start', 'time_window_end']] = df['time_window_start'].astype(str).str.extract(r'(.{5})(.{5})')

    df['_tw_start_time'] = df['time_window_start'].apply(lambda x: parse_time_window(x)[0] if isinstance(x, str) else None)
    df['_tw_end_time'] = df['time_window_end'].apply(lambda x: parse_time_window(x)[1] if isinstance(x, str) else None)
    return df
